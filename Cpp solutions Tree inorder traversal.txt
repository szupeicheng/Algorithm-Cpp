    vector<Node> traversal;
    Node *ptr = root;
    while (1) {   
     while (ptr != NULL) { //cout << ptr->data << ' '; 
     traversal.push_back(*ptr); ptr=ptr->left;}
        
    if ((ptr == NULL) && (traversal.size()== 0) ) return;
     
        Node p=traversal.back();//&ptr = traversal.back();    
        traversal.pop_back();
        //inorder.push_back(root->data);
        ptr = &p; cout << ptr->data << ' ';
        ptr = ptr->right;

    }



    vector<Node> traversal;
    Node *ptr = root;
           
code:    do { traversal.push_back(*ptr); ptr=ptr->left;}
         while (ptr != NULL) ;
         if ((ptr == NULL) && (traversal.size()== 0) ) return;
         else { 
        Node *p=traversal.back();
        //&ptr = traversal.back();    
        traversal.pop_back();
        //inorder.push_back(root->data);
        cout << ptr->data << ' ';
        ptr = ptr->right;
        goto code;
    }


class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

*/

    void inOrder(Node *root) {
    Node *ptr = root;
    if (ptr==NULL) return; 
    inOrder(root->left);
    cout << ptr->data << ' ';
    inOrder(root->right);
    }