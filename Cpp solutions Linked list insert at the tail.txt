//congradulations
SinglyLinkedListNode* insertNodeAtTail(SinglyLinkedListNode* llist, int data) {
SinglyLinkedListNode* nd = new SinglyLinkedListNode(data);
SinglyLinkedListNode* ptr = llist;
if (ptr == NULL) { llist = nd;  }
else { while (ptr != NULL ) { if (ptr->next == NULL) break; else ptr = ptr->next ; } ptr->next=nd;
//nd->next = llist; llist = nd; cout << "else" ;
}
return llist;

}
//compile error
SinglyLinkedListNode* nd = new SinglyLinkedListNode(data);
SinglyLinkedListNode* ptr = llist;
if (ptr == NULL) { llist = nd; }
else { while (ptr != NULL ) { ptr = ptr->next ; } ptr->next=nd;
//nd->next = llist; llist = nd; cout << "else" ;
}
return llist;

//runtime error 
SinglyLinkedListNode* insertNodeAtHead(SinglyLinkedListNode* llist, int data) {
SinglyLinkedListNode* nd = new SinglyLinkedListNode(data);
SinglyLinkedListNode* ptr = llist;
if (ptr == NULL) { llist = nd; }
else { while (ptr != NULL ) { ptr->next = ptr; } ptr->next=nd;
//nd->next = llist; llist = nd; cout << "else" ;
}
return llist;
}


    SinglyLinkedListNode node = SinglyLinkedListNode(data);
    //SinglyLinkedListNode* pnd = &nd;
    SinglyLinkedListNode* current = llist;
    //cout << data << endl;
    //ptr = head;
    if ( current == nullptr) { *llist = node; }
    else { //cout << data<< ' '; 
        while ( current != nullptr ) {
            SinglyLinkedListNode* left= current;
            current = current->next;

        }
        //cout << ptr->data<< ' ';
        left->next = &node;
    }
    //cout << head->data << ' ';
    return llist;


SinglyLinkedListNode* insertNodeAtTail(SinglyLinkedListNode* head, int data) {
    SinglyLinkedListNode node = SinglyLinkedListNode(data);
    //SinglyLinkedListNode* pnd = &nd;
    SinglyLinkedListNode current = *head;
    //cout << data << endl;
    //ptr = head;
    if (current == NULL) { *head = node; }
    else { //cout << data<< ' '; 
        while ( current.next != NULL ) { 
            current = current.next;
        }
        //cout << ptr->data<< ' ';
        current.next = node;
    }
    //cout << head->data << ' ';
    return head;

}