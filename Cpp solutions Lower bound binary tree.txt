#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <bits/stdc++.h>

using namespace std;

class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

class Solution {
    public:
      
      void preOrder(Node *root) {
        
          if( root == NULL )
              return;
      
          std::cout << root->data << " ";
          
          preOrder(root->left);
          preOrder(root->right);
    }


/*
Node is defined as 

class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

*/


Node *getNode(int item) {
  Node *temp = new Node(item) ;
  temp->data = item;
  temp->left = temp->right = NULL;
  return temp;
  
}

    Node * insert(Node * root, int data) {
if ( root ==NULL ) { return getNode(data); }
Node *ptr = root;
Node *parent = NULL;
while (ptr != NULL) { 
    parent = ptr; 
    //cout << ptr->data << ' ';
    if(data < ptr->data) { ptr=ptr->left; if (ptr == NULL){parent->left=getNode(data);} }
    else {ptr=ptr->right; if (ptr ==NULL) {parent->right=getNode(data);} }
    
}
    return root;
    }

void lowBound(Node * root, int val) {
  Node * low = root;
  Node * parent ;
  while ( low != NULL) {
    parent = low;
    if (low->data == val ) { cout << "Yes " << low->data << endl; return ; }
    else if ( low->data > val) {low= low->left;}
    else {low = low->right; }
  }
  if (low == NULL) cout << "No " << parent->data << endl;
  return ;
}


};

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
   
   int t;
   cin >> t ;
   //vector<int> vec;
   Solution myTree;
   Node* root = NULL;
   int x;

    while(t>0) {
        cin >> x ; //cout << 'x' << x << endl;
        //vec.push_back(x);
    root = myTree.insert(root, x);
        t--;
      }

    myTree.preOrder(root);

    int q;
    cin >> q;
    int y;
    while(q>0) {
        cin >> y ;
        myTree.lowBound(root, y);
        q--;
      } 
    return 0;
}
