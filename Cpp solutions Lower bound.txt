void lowBound(vector<int> v, int val) {
  vector<int>::iterator low;
  low = lower_bound( v.begin(), v.end(), val);    
  if (  *low != val ) { cout << "No " << (low - v.begin() +1) << endl;}
  else { cout << "Yes " << (low - v.begin() +1) << endl; }  
}


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
   int t;
   cin >> t ;
   vector<int> vec;
   int x;

    while(t>0) {
        cin >> x ; //cout << 'x' << x << endl;
        vec.push_back(x);
        t--;
      }
    //for (vector<int>::iterator it = vec.begin(); it != vec.end(); ++it) cout << *it << ' ';
    int q;
    cin >> q;
    int y;
    while(q>0) {
        cin >> y ;
        lowBound(vec, y);
        q--;
      } 
    return 0;
}


class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};


Node *getNode(int item) {
  Node *temp = new Node(item) ;
  temp->data = item;
  temp->left = temp->right = NULL;
  return temp;
  
}


    Node * insert(Node * root, int data) {
//Node n = Node(data);
//Node *p ;
if (root == NULL) { return getNode(data); }

if (data < root->data) root->left = insert(root->left, data);
else { root->right = insert(root->right, data); }
return root;

    }


    Node * insert(Node * root, int data) {
if ( root ==NULL ) { return getNode(data); }
Node *ptr = root;
Node *parent = NULL;
while (ptr != NULL) { 
    parent = ptr; 
    //cout << ptr->data << ' ';
    if(data < ptr->data) { ptr=ptr->left; if (ptr == NULL){parent->left=getNode(data);} }
    else {ptr=ptr->right; if (ptr ==NULL) {parent->right=getNode(data);} }
    
}
    return root;
    }

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
   
   int t;
   cin >> t ;
   //vector<int> vec;
   Solution myTree;
   Node* root = NULL;
   int x;

    while(t>0) {
        cin >> x ; //cout << 'x' << x << endl;
        //vec.push_back(x);
	root = myTree.insert(root, x);
        t--;
      }
    //for (vector<int>::iterator it = vec.begin(); it != vec.end(); ++it) cout << *it << ' ';
    int q;
    cin >> q;
    int y;
    while(q>0) {
        cin >> y ;
        lowBound(root, y);
        q--;
      } 
    return 0;
}


void lowBound(Node * root, int val) {
  Node * low;
  while ( low != NULL) {
	if (low->data == val ) { cout << "Yes " << low->data << endl; }
        else if ( low->data > val) {low= low->left;}
	else {low = low->right; }
  }
  //low = lower_bound( v.begin(), v.end(), val);    
  //if (  *low != val ) { cout << "No " << (low - v.begin() +1) << endl;}
  //else { cout << "Yes " << (low - v.begin() +1) << endl; }  
}
