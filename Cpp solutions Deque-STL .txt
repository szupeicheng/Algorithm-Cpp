    for (int j=0; j < (n - k + 1); j++) {
       // std::vector<int> darr(arr[j], arr[j+k-1]); 
        int p = arr[j];
        for (int idx =0; idx<k; idx++) //arr.push_back( (short int) darr[j+idx] ); 
            if (arr[j+idx]>p)  p = arr[j+idx];
        cout << p << ' ' ;
        //vector<int>::iterator largest = darr.begin();
        //vector<int>::iterator it = darr.begin();
        //while (++it != darr.end()) {
        //    if (*largest < *it) largest = it;  
        //}
        //cout << *largest << ' ' ;
    //cout << cnt << ' ' ;
    } 
    cout << endl;


void printKMax(int arr[], int n, int k){
    for (int j=0; j < (n - k  + 1 ); j++) {
        std::vector<short int> arr; 
        for (int idx =0; idx<k; idx++) arr.push_back( (short int) darr[j+idx] );
        
        deque<short int> counting (10000, 0); 
        vector<short int>::iterator it = arr.begin();
        for (; it != arr.end(); ++it) {
            int index = *it ;
             counting.at(index)++;
        }
        deque<short int>::iterator dit = counting.end();
        int cnt = 10000;
        while (*dit == 0 ) { --dit; cnt--;}
        cout << cnt << ' ' ;
    } 
    cout << endl;


    for (unsigned j=0; j < (n - k  + 1 ); j++) 
    {
        std::vector<int> arr; 
        for (unsigned idx =0; idx<k; idx++) arr.push_back(darr[j+idx]);

    deque<int> counting (10000, 0); 
    deque<int>::iterator it = arr.begin();
    for (; it != arr.end(); ++it) {
        int index = *it ;
        //vector<int>::iterator cit = counting.begin() + index; 
        counting.at(index)++;
    }
    deque<int>::iterator it = counting.end();
    while (*it == 0 ) { --it;}
    cout << *it << ' ' ;
    } 
    cout << endl;

    //return counting;


Your code did not execute within the time limits


void printKMax(int darr[], int n, int k){
	//Write your code here.
    for (unsigned j=0; j < (n - k  + 1 ); j++) 
    {
        std::vector<int> arr; // (darr.begin(), darr.begin() + k );
        for (unsigned idx =0; idx<k; idx++) arr.push_back(darr[j+idx]);

        for (unsigned i=1; i< arr.size(); i++ ) 
        {
            int index;
            index = i;
            int p = arr.at(i);
            std::vector<int>::iterator rit = arr.begin()+index;
            for ( ; rit != arr.begin() -1 ; --rit) { 
            vector<int>::iterator loindex=rit-1, cindex=rit;
            if ( *loindex <= p ) { *cindex = p; break; 
            }
            else { *cindex = *loindex; }
            }
            //for (unsigned i=0; i< arr.size(); i++ ) std::cout << arr.at(i) << ' ' ;
            //cout << endl;
        }
            cout << arr.back()<< ' ' ; 
    }
    cout << endl;
}


void printKMax(int arr[], int n, int k){
	//Write your code here.
}
int main(){
  
	int t;
	cin >> t;
	while(t>0) {
		int n,k;
    	cin >> n >> k;
    	int i;
    	int darr[n];
    	for(i=0;i<n;i++)
      		cin >> darr[i];
    	printKMax(darr, n, k);
    	t--;
  	}
  	return 0;
}


